format ELF64			; Формат - запускаемый формат ELF64 - запускаемые программы на 64 битном Linux

section '.rodata'		; сегмент констант
welcome db 'Числа Ферма длины до машинного слова:', 10, 0 
pfmt db '%llu',10,0		; формат для печати 64битного числа: "%llf\n"
totfmt db 'Всего чисел Ферма до длины машинного слова: %llu',10, 0 

public main			; наружу из программы экспортируем функцию main
extrn printf			; используем внешнюю функцию printf

section '.code' executable	; начало сегмента кода, в сегменте можно выполнять код

main:
	push rbp		; rbp в стек
	mov rbp, rsp		; rsp->rbp, стек: адрес_возврата, сохраненное_rbp<-rpb 
	sub rsp, 16		; создаем место под 2 локальные переменные (под 2, так как стек должен остаться выровненным на 16)
	mov rdi, welcome	; 1 аргумент printf в rdi
	xor rax, rax 		; количество используемых векторных регистров -> 0 
	call printf		; печатаем приглашение 
	mov qword [rbp-8], 1 	; в [rbp-8] у нас будет степень двойки, в которую мы будем возводить двойку
	mov qword [rbp-16], 0   ; счетчик чисел Ферма
l:
	mov rcx, [rbp-8]	; вытащили из стека нашу степень
	cmp rcx, 64		; сравнили ее с 64
	je ee			; если равна, то все, идем в конец, потому что 2^64+1 >2^64-1
	mov rsi, 1		; заносим в rsi единицу
	shl rsi, cl		; сдвигаем rsi на cl, то есть умножаем на 2^[rpb-8], то есть получаем 2^(2^n)
	inc rsi			; увеличиваем на 1, в rsi очередное число Ферма, и это второй аргумент функции
	mov rdi, pfmt		; первый аргумент функции - формат печати нашего числа ("%llu\n") в rdi
	xor rax, rax		; количество используемых векторных регистров -> 0 
	call printf		; печатаем очередное число Ферма
	shl qword [rbp-8],1	; умножаем степень на 2
	inc qword [rbp-16]	; увеличиваем счетчик числе Ферма
	jmp l			; идем в начало цикла
ee:
	mov rdi, totfmt		; первый аргумент функции - формат печати
	mov rsi, [rbp-16]	; второй - счетчик чисел Ферма
	xor rax, rax    	; количество используемых векторных регистров -> 0 
	call printf     	; печаетаем число чисел Ферма
	xor rax, rax		; код возврата программы - 0 (он в eax, а это часть rax)
	leave			; восстанавливаем стек, аналог mov rsp, rbp | pop rbp
	ret			; выходим из функции main
